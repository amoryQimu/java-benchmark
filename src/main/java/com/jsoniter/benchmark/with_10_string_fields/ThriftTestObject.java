package com.jsoniter.benchmark.with_10_string_fields;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-02-05")
public class ThriftTestObject implements org.apache.thrift.TBase<ThriftTestObject, ThriftTestObject._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftTestObject> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftTestObject");

  private static final org.apache.thrift.protocol.TField FIELD1_FIELD_DESC = new org.apache.thrift.protocol.TField("field1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FIELD2_FIELD_DESC = new org.apache.thrift.protocol.TField("field2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FIELD3_FIELD_DESC = new org.apache.thrift.protocol.TField("field3", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField FIELD4_FIELD_DESC = new org.apache.thrift.protocol.TField("field4", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FIELD5_FIELD_DESC = new org.apache.thrift.protocol.TField("field5", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField FIELD6_FIELD_DESC = new org.apache.thrift.protocol.TField("field6", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FIELD7_FIELD_DESC = new org.apache.thrift.protocol.TField("field7", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FIELD8_FIELD_DESC = new org.apache.thrift.protocol.TField("field8", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FIELD9_FIELD_DESC = new org.apache.thrift.protocol.TField("field9", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField FIELD10_FIELD_DESC = new org.apache.thrift.protocol.TField("field10", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ThriftTestObjectStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ThriftTestObjectTupleSchemeFactory();

  public java.lang.String field1; // required
  public java.lang.String field2; // required
  public java.lang.String field3; // required
  public java.lang.String field4; // required
  public java.lang.String field5; // required
  public java.lang.String field6; // required
  public java.lang.String field7; // required
  public java.lang.String field8; // required
  public java.lang.String field9; // required
  public java.lang.String field10; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FIELD1((short)1, "field1"),
    FIELD2((short)2, "field2"),
    FIELD3((short)3, "field3"),
    FIELD4((short)4, "field4"),
    FIELD5((short)5, "field5"),
    FIELD6((short)6, "field6"),
    FIELD7((short)7, "field7"),
    FIELD8((short)8, "field8"),
    FIELD9((short)9, "field9"),
    FIELD10((short)10, "field10");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FIELD1
          return FIELD1;
        case 2: // FIELD2
          return FIELD2;
        case 3: // FIELD3
          return FIELD3;
        case 4: // FIELD4
          return FIELD4;
        case 5: // FIELD5
          return FIELD5;
        case 6: // FIELD6
          return FIELD6;
        case 7: // FIELD7
          return FIELD7;
        case 8: // FIELD8
          return FIELD8;
        case 9: // FIELD9
          return FIELD9;
        case 10: // FIELD10
          return FIELD10;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FIELD1, new org.apache.thrift.meta_data.FieldMetaData("field1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD2, new org.apache.thrift.meta_data.FieldMetaData("field2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD3, new org.apache.thrift.meta_data.FieldMetaData("field3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD4, new org.apache.thrift.meta_data.FieldMetaData("field4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD5, new org.apache.thrift.meta_data.FieldMetaData("field5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD6, new org.apache.thrift.meta_data.FieldMetaData("field6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD7, new org.apache.thrift.meta_data.FieldMetaData("field7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD8, new org.apache.thrift.meta_data.FieldMetaData("field8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD9, new org.apache.thrift.meta_data.FieldMetaData("field9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIELD10, new org.apache.thrift.meta_data.FieldMetaData("field10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftTestObject.class, metaDataMap);
  }

  public ThriftTestObject() {
  }

  public ThriftTestObject(
    java.lang.String field1,
    java.lang.String field2,
    java.lang.String field3,
    java.lang.String field4,
    java.lang.String field5,
    java.lang.String field6,
    java.lang.String field7,
    java.lang.String field8,
    java.lang.String field9,
    java.lang.String field10)
  {
    this();
    this.field1 = field1;
    this.field2 = field2;
    this.field3 = field3;
    this.field4 = field4;
    this.field5 = field5;
    this.field6 = field6;
    this.field7 = field7;
    this.field8 = field8;
    this.field9 = field9;
    this.field10 = field10;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftTestObject(ThriftTestObject other) {
    if (other.isSetField1()) {
      this.field1 = other.field1;
    }
    if (other.isSetField2()) {
      this.field2 = other.field2;
    }
    if (other.isSetField3()) {
      this.field3 = other.field3;
    }
    if (other.isSetField4()) {
      this.field4 = other.field4;
    }
    if (other.isSetField5()) {
      this.field5 = other.field5;
    }
    if (other.isSetField6()) {
      this.field6 = other.field6;
    }
    if (other.isSetField7()) {
      this.field7 = other.field7;
    }
    if (other.isSetField8()) {
      this.field8 = other.field8;
    }
    if (other.isSetField9()) {
      this.field9 = other.field9;
    }
    if (other.isSetField10()) {
      this.field10 = other.field10;
    }
  }

  public ThriftTestObject deepCopy() {
    return new ThriftTestObject(this);
  }

  @Override
  public void clear() {
    this.field1 = null;
    this.field2 = null;
    this.field3 = null;
    this.field4 = null;
    this.field5 = null;
    this.field6 = null;
    this.field7 = null;
    this.field8 = null;
    this.field9 = null;
    this.field10 = null;
  }

  public java.lang.String getField1() {
    return this.field1;
  }

  public ThriftTestObject setField1(java.lang.String field1) {
    this.field1 = field1;
    return this;
  }

  public void unsetField1() {
    this.field1 = null;
  }

  /** Returns true if field field1 is set (has been assigned a value) and false otherwise */
  public boolean isSetField1() {
    return this.field1 != null;
  }

  public void setField1IsSet(boolean value) {
    if (!value) {
      this.field1 = null;
    }
  }

  public java.lang.String getField2() {
    return this.field2;
  }

  public ThriftTestObject setField2(java.lang.String field2) {
    this.field2 = field2;
    return this;
  }

  public void unsetField2() {
    this.field2 = null;
  }

  /** Returns true if field field2 is set (has been assigned a value) and false otherwise */
  public boolean isSetField2() {
    return this.field2 != null;
  }

  public void setField2IsSet(boolean value) {
    if (!value) {
      this.field2 = null;
    }
  }

  public java.lang.String getField3() {
    return this.field3;
  }

  public ThriftTestObject setField3(java.lang.String field3) {
    this.field3 = field3;
    return this;
  }

  public void unsetField3() {
    this.field3 = null;
  }

  /** Returns true if field field3 is set (has been assigned a value) and false otherwise */
  public boolean isSetField3() {
    return this.field3 != null;
  }

  public void setField3IsSet(boolean value) {
    if (!value) {
      this.field3 = null;
    }
  }

  public java.lang.String getField4() {
    return this.field4;
  }

  public ThriftTestObject setField4(java.lang.String field4) {
    this.field4 = field4;
    return this;
  }

  public void unsetField4() {
    this.field4 = null;
  }

  /** Returns true if field field4 is set (has been assigned a value) and false otherwise */
  public boolean isSetField4() {
    return this.field4 != null;
  }

  public void setField4IsSet(boolean value) {
    if (!value) {
      this.field4 = null;
    }
  }

  public java.lang.String getField5() {
    return this.field5;
  }

  public ThriftTestObject setField5(java.lang.String field5) {
    this.field5 = field5;
    return this;
  }

  public void unsetField5() {
    this.field5 = null;
  }

  /** Returns true if field field5 is set (has been assigned a value) and false otherwise */
  public boolean isSetField5() {
    return this.field5 != null;
  }

  public void setField5IsSet(boolean value) {
    if (!value) {
      this.field5 = null;
    }
  }

  public java.lang.String getField6() {
    return this.field6;
  }

  public ThriftTestObject setField6(java.lang.String field6) {
    this.field6 = field6;
    return this;
  }

  public void unsetField6() {
    this.field6 = null;
  }

  /** Returns true if field field6 is set (has been assigned a value) and false otherwise */
  public boolean isSetField6() {
    return this.field6 != null;
  }

  public void setField6IsSet(boolean value) {
    if (!value) {
      this.field6 = null;
    }
  }

  public java.lang.String getField7() {
    return this.field7;
  }

  public ThriftTestObject setField7(java.lang.String field7) {
    this.field7 = field7;
    return this;
  }

  public void unsetField7() {
    this.field7 = null;
  }

  /** Returns true if field field7 is set (has been assigned a value) and false otherwise */
  public boolean isSetField7() {
    return this.field7 != null;
  }

  public void setField7IsSet(boolean value) {
    if (!value) {
      this.field7 = null;
    }
  }

  public java.lang.String getField8() {
    return this.field8;
  }

  public ThriftTestObject setField8(java.lang.String field8) {
    this.field8 = field8;
    return this;
  }

  public void unsetField8() {
    this.field8 = null;
  }

  /** Returns true if field field8 is set (has been assigned a value) and false otherwise */
  public boolean isSetField8() {
    return this.field8 != null;
  }

  public void setField8IsSet(boolean value) {
    if (!value) {
      this.field8 = null;
    }
  }

  public java.lang.String getField9() {
    return this.field9;
  }

  public ThriftTestObject setField9(java.lang.String field9) {
    this.field9 = field9;
    return this;
  }

  public void unsetField9() {
    this.field9 = null;
  }

  /** Returns true if field field9 is set (has been assigned a value) and false otherwise */
  public boolean isSetField9() {
    return this.field9 != null;
  }

  public void setField9IsSet(boolean value) {
    if (!value) {
      this.field9 = null;
    }
  }

  public java.lang.String getField10() {
    return this.field10;
  }

  public ThriftTestObject setField10(java.lang.String field10) {
    this.field10 = field10;
    return this;
  }

  public void unsetField10() {
    this.field10 = null;
  }

  /** Returns true if field field10 is set (has been assigned a value) and false otherwise */
  public boolean isSetField10() {
    return this.field10 != null;
  }

  public void setField10IsSet(boolean value) {
    if (!value) {
      this.field10 = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FIELD1:
      if (value == null) {
        unsetField1();
      } else {
        setField1((java.lang.String)value);
      }
      break;

    case FIELD2:
      if (value == null) {
        unsetField2();
      } else {
        setField2((java.lang.String)value);
      }
      break;

    case FIELD3:
      if (value == null) {
        unsetField3();
      } else {
        setField3((java.lang.String)value);
      }
      break;

    case FIELD4:
      if (value == null) {
        unsetField4();
      } else {
        setField4((java.lang.String)value);
      }
      break;

    case FIELD5:
      if (value == null) {
        unsetField5();
      } else {
        setField5((java.lang.String)value);
      }
      break;

    case FIELD6:
      if (value == null) {
        unsetField6();
      } else {
        setField6((java.lang.String)value);
      }
      break;

    case FIELD7:
      if (value == null) {
        unsetField7();
      } else {
        setField7((java.lang.String)value);
      }
      break;

    case FIELD8:
      if (value == null) {
        unsetField8();
      } else {
        setField8((java.lang.String)value);
      }
      break;

    case FIELD9:
      if (value == null) {
        unsetField9();
      } else {
        setField9((java.lang.String)value);
      }
      break;

    case FIELD10:
      if (value == null) {
        unsetField10();
      } else {
        setField10((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FIELD1:
      return getField1();

    case FIELD2:
      return getField2();

    case FIELD3:
      return getField3();

    case FIELD4:
      return getField4();

    case FIELD5:
      return getField5();

    case FIELD6:
      return getField6();

    case FIELD7:
      return getField7();

    case FIELD8:
      return getField8();

    case FIELD9:
      return getField9();

    case FIELD10:
      return getField10();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FIELD1:
      return isSetField1();
    case FIELD2:
      return isSetField2();
    case FIELD3:
      return isSetField3();
    case FIELD4:
      return isSetField4();
    case FIELD5:
      return isSetField5();
    case FIELD6:
      return isSetField6();
    case FIELD7:
      return isSetField7();
    case FIELD8:
      return isSetField8();
    case FIELD9:
      return isSetField9();
    case FIELD10:
      return isSetField10();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftTestObject)
      return this.equals((ThriftTestObject)that);
    return false;
  }

  public boolean equals(ThriftTestObject that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_field1 = true && this.isSetField1();
    boolean that_present_field1 = true && that.isSetField1();
    if (this_present_field1 || that_present_field1) {
      if (!(this_present_field1 && that_present_field1))
        return false;
      if (!this.field1.equals(that.field1))
        return false;
    }

    boolean this_present_field2 = true && this.isSetField2();
    boolean that_present_field2 = true && that.isSetField2();
    if (this_present_field2 || that_present_field2) {
      if (!(this_present_field2 && that_present_field2))
        return false;
      if (!this.field2.equals(that.field2))
        return false;
    }

    boolean this_present_field3 = true && this.isSetField3();
    boolean that_present_field3 = true && that.isSetField3();
    if (this_present_field3 || that_present_field3) {
      if (!(this_present_field3 && that_present_field3))
        return false;
      if (!this.field3.equals(that.field3))
        return false;
    }

    boolean this_present_field4 = true && this.isSetField4();
    boolean that_present_field4 = true && that.isSetField4();
    if (this_present_field4 || that_present_field4) {
      if (!(this_present_field4 && that_present_field4))
        return false;
      if (!this.field4.equals(that.field4))
        return false;
    }

    boolean this_present_field5 = true && this.isSetField5();
    boolean that_present_field5 = true && that.isSetField5();
    if (this_present_field5 || that_present_field5) {
      if (!(this_present_field5 && that_present_field5))
        return false;
      if (!this.field5.equals(that.field5))
        return false;
    }

    boolean this_present_field6 = true && this.isSetField6();
    boolean that_present_field6 = true && that.isSetField6();
    if (this_present_field6 || that_present_field6) {
      if (!(this_present_field6 && that_present_field6))
        return false;
      if (!this.field6.equals(that.field6))
        return false;
    }

    boolean this_present_field7 = true && this.isSetField7();
    boolean that_present_field7 = true && that.isSetField7();
    if (this_present_field7 || that_present_field7) {
      if (!(this_present_field7 && that_present_field7))
        return false;
      if (!this.field7.equals(that.field7))
        return false;
    }

    boolean this_present_field8 = true && this.isSetField8();
    boolean that_present_field8 = true && that.isSetField8();
    if (this_present_field8 || that_present_field8) {
      if (!(this_present_field8 && that_present_field8))
        return false;
      if (!this.field8.equals(that.field8))
        return false;
    }

    boolean this_present_field9 = true && this.isSetField9();
    boolean that_present_field9 = true && that.isSetField9();
    if (this_present_field9 || that_present_field9) {
      if (!(this_present_field9 && that_present_field9))
        return false;
      if (!this.field9.equals(that.field9))
        return false;
    }

    boolean this_present_field10 = true && this.isSetField10();
    boolean that_present_field10 = true && that.isSetField10();
    if (this_present_field10 || that_present_field10) {
      if (!(this_present_field10 && that_present_field10))
        return false;
      if (!this.field10.equals(that.field10))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetField1()) ? 131071 : 524287);
    if (isSetField1())
      hashCode = hashCode * 8191 + field1.hashCode();

    hashCode = hashCode * 8191 + ((isSetField2()) ? 131071 : 524287);
    if (isSetField2())
      hashCode = hashCode * 8191 + field2.hashCode();

    hashCode = hashCode * 8191 + ((isSetField3()) ? 131071 : 524287);
    if (isSetField3())
      hashCode = hashCode * 8191 + field3.hashCode();

    hashCode = hashCode * 8191 + ((isSetField4()) ? 131071 : 524287);
    if (isSetField4())
      hashCode = hashCode * 8191 + field4.hashCode();

    hashCode = hashCode * 8191 + ((isSetField5()) ? 131071 : 524287);
    if (isSetField5())
      hashCode = hashCode * 8191 + field5.hashCode();

    hashCode = hashCode * 8191 + ((isSetField6()) ? 131071 : 524287);
    if (isSetField6())
      hashCode = hashCode * 8191 + field6.hashCode();

    hashCode = hashCode * 8191 + ((isSetField7()) ? 131071 : 524287);
    if (isSetField7())
      hashCode = hashCode * 8191 + field7.hashCode();

    hashCode = hashCode * 8191 + ((isSetField8()) ? 131071 : 524287);
    if (isSetField8())
      hashCode = hashCode * 8191 + field8.hashCode();

    hashCode = hashCode * 8191 + ((isSetField9()) ? 131071 : 524287);
    if (isSetField9())
      hashCode = hashCode * 8191 + field9.hashCode();

    hashCode = hashCode * 8191 + ((isSetField10()) ? 131071 : 524287);
    if (isSetField10())
      hashCode = hashCode * 8191 + field10.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ThriftTestObject other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetField1()).compareTo(other.isSetField1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field1, other.field1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField2()).compareTo(other.isSetField2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field2, other.field2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField3()).compareTo(other.isSetField3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field3, other.field3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField4()).compareTo(other.isSetField4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field4, other.field4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField5()).compareTo(other.isSetField5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field5, other.field5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField6()).compareTo(other.isSetField6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field6, other.field6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField7()).compareTo(other.isSetField7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field7, other.field7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField8()).compareTo(other.isSetField8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field8, other.field8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField9()).compareTo(other.isSetField9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field9, other.field9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetField10()).compareTo(other.isSetField10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetField10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field10, other.field10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ThriftTestObject(");
    boolean first = true;

    sb.append("field1:");
    if (this.field1 == null) {
      sb.append("null");
    } else {
      sb.append(this.field1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field2:");
    if (this.field2 == null) {
      sb.append("null");
    } else {
      sb.append(this.field2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field3:");
    if (this.field3 == null) {
      sb.append("null");
    } else {
      sb.append(this.field3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field4:");
    if (this.field4 == null) {
      sb.append("null");
    } else {
      sb.append(this.field4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field5:");
    if (this.field5 == null) {
      sb.append("null");
    } else {
      sb.append(this.field5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field6:");
    if (this.field6 == null) {
      sb.append("null");
    } else {
      sb.append(this.field6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field7:");
    if (this.field7 == null) {
      sb.append("null");
    } else {
      sb.append(this.field7);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field8:");
    if (this.field8 == null) {
      sb.append("null");
    } else {
      sb.append(this.field8);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field9:");
    if (this.field9 == null) {
      sb.append("null");
    } else {
      sb.append(this.field9);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("field10:");
    if (this.field10 == null) {
      sb.append("null");
    } else {
      sb.append(this.field10);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftTestObjectStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftTestObjectStandardScheme getScheme() {
      return new ThriftTestObjectStandardScheme();
    }
  }

  private static class ThriftTestObjectStandardScheme extends org.apache.thrift.scheme.StandardScheme<ThriftTestObject> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftTestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FIELD1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field1 = iprot.readString();
              struct.setField1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FIELD2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field2 = iprot.readString();
              struct.setField2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FIELD3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field3 = iprot.readString();
              struct.setField3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FIELD4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field4 = iprot.readString();
              struct.setField4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FIELD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field5 = iprot.readString();
              struct.setField5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FIELD6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field6 = iprot.readString();
              struct.setField6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FIELD7
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field7 = iprot.readString();
              struct.setField7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIELD8
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field8 = iprot.readString();
              struct.setField8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FIELD9
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field9 = iprot.readString();
              struct.setField9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FIELD10
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.field10 = iprot.readString();
              struct.setField10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftTestObject struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.field1 != null) {
        oprot.writeFieldBegin(FIELD1_FIELD_DESC);
        oprot.writeString(struct.field1);
        oprot.writeFieldEnd();
      }
      if (struct.field2 != null) {
        oprot.writeFieldBegin(FIELD2_FIELD_DESC);
        oprot.writeString(struct.field2);
        oprot.writeFieldEnd();
      }
      if (struct.field3 != null) {
        oprot.writeFieldBegin(FIELD3_FIELD_DESC);
        oprot.writeString(struct.field3);
        oprot.writeFieldEnd();
      }
      if (struct.field4 != null) {
        oprot.writeFieldBegin(FIELD4_FIELD_DESC);
        oprot.writeString(struct.field4);
        oprot.writeFieldEnd();
      }
      if (struct.field5 != null) {
        oprot.writeFieldBegin(FIELD5_FIELD_DESC);
        oprot.writeString(struct.field5);
        oprot.writeFieldEnd();
      }
      if (struct.field6 != null) {
        oprot.writeFieldBegin(FIELD6_FIELD_DESC);
        oprot.writeString(struct.field6);
        oprot.writeFieldEnd();
      }
      if (struct.field7 != null) {
        oprot.writeFieldBegin(FIELD7_FIELD_DESC);
        oprot.writeString(struct.field7);
        oprot.writeFieldEnd();
      }
      if (struct.field8 != null) {
        oprot.writeFieldBegin(FIELD8_FIELD_DESC);
        oprot.writeString(struct.field8);
        oprot.writeFieldEnd();
      }
      if (struct.field9 != null) {
        oprot.writeFieldBegin(FIELD9_FIELD_DESC);
        oprot.writeString(struct.field9);
        oprot.writeFieldEnd();
      }
      if (struct.field10 != null) {
        oprot.writeFieldBegin(FIELD10_FIELD_DESC);
        oprot.writeString(struct.field10);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftTestObjectTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ThriftTestObjectTupleScheme getScheme() {
      return new ThriftTestObjectTupleScheme();
    }
  }

  private static class ThriftTestObjectTupleScheme extends org.apache.thrift.scheme.TupleScheme<ThriftTestObject> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftTestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetField1()) {
        optionals.set(0);
      }
      if (struct.isSetField2()) {
        optionals.set(1);
      }
      if (struct.isSetField3()) {
        optionals.set(2);
      }
      if (struct.isSetField4()) {
        optionals.set(3);
      }
      if (struct.isSetField5()) {
        optionals.set(4);
      }
      if (struct.isSetField6()) {
        optionals.set(5);
      }
      if (struct.isSetField7()) {
        optionals.set(6);
      }
      if (struct.isSetField8()) {
        optionals.set(7);
      }
      if (struct.isSetField9()) {
        optionals.set(8);
      }
      if (struct.isSetField10()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetField1()) {
        oprot.writeString(struct.field1);
      }
      if (struct.isSetField2()) {
        oprot.writeString(struct.field2);
      }
      if (struct.isSetField3()) {
        oprot.writeString(struct.field3);
      }
      if (struct.isSetField4()) {
        oprot.writeString(struct.field4);
      }
      if (struct.isSetField5()) {
        oprot.writeString(struct.field5);
      }
      if (struct.isSetField6()) {
        oprot.writeString(struct.field6);
      }
      if (struct.isSetField7()) {
        oprot.writeString(struct.field7);
      }
      if (struct.isSetField8()) {
        oprot.writeString(struct.field8);
      }
      if (struct.isSetField9()) {
        oprot.writeString(struct.field9);
      }
      if (struct.isSetField10()) {
        oprot.writeString(struct.field10);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftTestObject struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.field1 = iprot.readString();
        struct.setField1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.field2 = iprot.readString();
        struct.setField2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.field3 = iprot.readString();
        struct.setField3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.field4 = iprot.readString();
        struct.setField4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.field5 = iprot.readString();
        struct.setField5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.field6 = iprot.readString();
        struct.setField6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.field7 = iprot.readString();
        struct.setField7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.field8 = iprot.readString();
        struct.setField8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.field9 = iprot.readString();
        struct.setField9IsSet(true);
      }
      if (incoming.get(9)) {
        struct.field10 = iprot.readString();
        struct.setField10IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

